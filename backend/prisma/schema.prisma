// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int       @id @default(autoincrement())
  uid           String    @unique //Publicliy displayed id (randomly generated number hard to predict) used for stuff that the normal client will see
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified Boolean   @default(false)
  password      String
  dob           DateTime
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())

  profile       Profile[]
  event         Event[]

}

model Profile {
  id       Int      @id @default(autoincrement())
  avatar   String   //Will be auto generated
  bio      String?  //Optional not required
  color    String   //User name color and few others

  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}


model Event {
  id        Int     @id @default(autoincrement())
  eid       String    @unique //Publicliy displayed id (randomly generated number hard to predict) used for stuff that the normal client will see
  name      String  //Event Name
  color     String  //Background color for the partciles effect
  openChat  Boolean @default(false) //Used to enable the chat for beig joinable

  user      User    @relation(fields: [ownerId], references: [id])
  ownerId   Int

  event     eventModerators[]
  attendees  eventAttendees[]
}

model eventModerators {
  id        Int        @id @default(autoincrement())
  user      Int        @unique //This is user Id (table id) not the uid
  role      EventRole  @default(MOD)
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   Int
  
}

model eventAttendees {
  id        Int        @id @default(autoincrement())
  user      Int        @unique//This is user Id (table id) not the uid
  acceptedInvite  Boolean @default(false)


  event     Event      @relation(fields: [eventId], references: [id])
  eventId   Int
  
}



enum EventRole {
  MOD       // "MOD" is responsible for managing the chat
  COOWNER   // "COOWNER" can do the same as "MOD" but he can aslo manage the Event name, color etc 
}


enum UserRole {
  USER      // "USER" is the default user creating a profile and participating in the concerts
  PARTNER   // "PARTNER" is the event creator who is going to register his event
  IT        // "IT" optional (self explanatory)
}
